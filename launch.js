// Generated by CoffeeScript 1.7.1

/******************************************************************************
 * SPDX-FileCopyrightText: Copyright 2023 LG Electronics Inc.
 * SPDX-License-Identifier: MIT
 ******************************************************************************/

(function () {
  var $, a, defaultControls, getWebGL, hasWebGL, init, s, u, _fn, _i, _len;

  $ = function (_) {
    return document.getElementById(_);
  };

  init = function (controlType, quality, hud, godmode, gameMode, difficulty) {
    var hexGL, progressbar;
    hexGL = new bkcore.hexgl.HexGL({
      document: document,
      width: window.innerWidth,
      height: window.innerHeight,
      container: $("main"),
      overlay: $("overlay"),
      gameover: $("step-5"),
      quality: quality,
      hud: hud === 1,
      controlType: controlType,
      /******************** Modified by LGE ***********************/
      difficulty: difficulty,
      gameMode: gameMode,
      /************************************************************/
      godmode: godmode,
      track: "Cityscape"
    });
    window.hexGL = hexGL;
    progressbar = $("progressbar");
    return hexGL.load({
      onLoad: function () {
        console.log("LOADED.");
        hexGL.init();
        $("step-3").style.display = "none";
        $("step-4").style.display = "block";
        return hexGL.start();
      },
      onError: function (s) {
        return console.error("Error loading " + s + ".");
      },
      onProgress: function (p, t, n) {
        console.log(
          "LOADED " + t + " : " + n + " ( " + p.loaded + " / " + p.total + " )."
        );
        return (progressbar.style.width =
          "" + (p.loaded / p.total) * 100 + "%");
      }
    });
  };

  u = bkcore.Utils.getURLParameter;

  /******************** Modified by LGE ***********************/
  // Back Key Event Controller
  window.addEventListener("keydown", (e) => {
    // Keycodes in MRCU input events mean: Back(461)
    // See more MRCU input keycodes in this url:
    // https://webostv.developer.lge.com/develop/guides/magic-remote#magic-remote-control-unit
    switch (
      e.keyCode // Press back button then webOS.platformBack() method is executed.
    ) {
      case 461:
        // If you want to use webOS.platformBack() method,
        // Set the "disableBackHistoryAPI" property to "true" in the appinfo.json file.
        webOS.platformBack();
        break;
    }
  });

  // Disable below code because TouchDevice is not used
  // defaultControls = bkcore.Utils.isTouchDevice() ? 1 : 0;
  defaultControls = 0;

  s = [
    // Disable unused touch / leap / gamepad controller
    [
      "controlType",
      [
        "MOTION SENSOR",
        "KEYBOARD"
        /* , 'TOUCH', 'LEAP MOTION CONTROLLER', 'GAMEPAD' */
      ],
      defaultControls,
      defaultControls,
      "Controls: "
    ],
    // Original version default quality is '3', changed
    ["quality", ["LOW", "MID", "HIGH", "VERY HIGH"], 1, 0, "Quality: "],
    ["hud", ["OFF", "ON"], 1, 1, "HUD: "],
    ["godmode", ["OFF", "ON"], 0, 1, "Godmode: "],
    // Added gameMode (handhold and steering wheel mode) for Motion Sensor
    ["gameMode", ["HAND HOLD", "STEERING WHEEL"], 0, 0, "Game Mode: "],
    ["difficulty", ["EASY", "HARD"], 0, 0, "Difficulty: "]
  ];
  /************************************************************/

  _fn = function (a) {
    var e, f, _ref;
    a[3] = (_ref = u(a[0])) != null ? _ref : a[2];
    e = $("s-" + a[0]);
    d = $("s-gameMode").style;
    (f = function () {
      return (e.innerHTML = a[4] + a[1][a[3]]);
    })();
    return (e.onclick = function () {
      /******************** Modified by LGE ***********************/
      // When click controller tap (Motion sensor / Keyboard),
      // enable for select Motion Sensor game mode & disable for Keyboard
      if (e.innerHTML == "Controls: MOTION SENSOR") {
        d.pointerEvents = "none";
        d.color = "#b3b3b3";
      } else if (e.innerHTML == "Controls: KEYBOARD") {
        d.pointerEvents = "auto";
        d.color = "";
      }
      /************************************************************/
      return f((a[3] = (a[3] + 1) % a[1].length));
    });
  };
  for (_i = 0, _len = s.length; _i < _len; _i++) {
    a = s[_i];
    _fn(a);
  }

  $("step-2").onclick = function () {
    $("step-2").style.display = "none";
    $("step-3").style.display = "block";
    /******************** Modified by LGE ***********************/
    // s[4][3] & s[5][3] is added for initial state of gameMode and difficulty
    return init(s[0][3], s[1][3], s[2][3], s[3][3], s[4][3], s[5][3]);
    /************************************************************/
  };

  $("step-5").onclick = function () {
    return window.location.reload();
  };

  $("s-credits").onclick = function () {
    $("step-1").style.display = "none";
    return ($("credits").style.display = "block");
  };

  $("credits").onclick = function () {
    $("step-1").style.display = "block";
    return ($("credits").style.display = "none");
  };

  hasWebGL = function () {
    var canvas, gl;
    gl = null;
    canvas = document.createElement("canvas");
    try {
      gl = canvas.getContext("webgl");
    } catch (_error) {}
    if (gl == null) {
      try {
        gl = canvas.getContext("experimental-webgl");
      } catch (_error) {}
    }
    return gl != null;
  };

  if (!hasWebGL()) {
    getWebGL = $("start");
    getWebGL.innerHTML = "WebGL is not supported!";
    getWebGL.onclick = function () {
      return (window.location.href = "http://get.webgl.org/");
    };
  } else {
    $("start").onclick = function () {
      $("step-1").style.display = "none";
      $("step-2").style.display = "block";
      /******************** Modified by LGE ***********************/
      // Change guide page with controlType & gameMode
      if (s[0][3] !== 0) {
        // Keyboard controller guide Image
        return ($("step-2").style.backgroundImage = "url(css/help-0.png)");
      } else {
        // MRCU controller guide Image
        return ($("step-2").style.backgroundImage =
          "url(assets/help-mrcu" + s[4][3] + ".png)");
      }
      /************************************************************/
    };
  }
}).call(this);
